from pysb.simulator.base import Simulator, SimulationResult

import numpy as np

from tempfile import mkdtemp

import sys
import os
import shutil
import importlib

try:
    import amici
except ImportError:
    amici = None


class AmiciSimulator(Simulator):
    """
    Simulate a model using amici (https://github.com/ICB-DCM/AMICI)

    Parameters
    ----------
    model : pysb.Model
        Model to simulate.
    tspan : vector-like, optional
        Time values over which to simulate. The first and last values define
        the time range. Returned trajectories are sampled at every value unless
        the simulation is interrupted for some reason, e.g., due to
        satisfaction of a logical stopping criterion (see 'tout' below).
    initials : vector-like or dict, optional
        Values to use for the initial condition of all species. Ordering is
        determined by the order of model.species. If not specified, initial
        conditions will be taken from model.initials (with initial condition
        parameter values taken from `param_values` if specified).
    param_values : vector-like or dict, optional
        Values to use for every parameter in the model. Ordering is
        determined by the order of model.parameters.
        If passed as a dictionary, keys must be parameter names.
        If not specified, parameter values will be taken directly from
        model.parameters.
    verbose : bool or int, optional (default: False)
        Sets the verbosity level of the logger. See the logging levels and
        constants from Python's logging module for interpretation of integer
        values. False is equal to the PySB default level (currently WARNING),
        True is equal to DEBUG.
    **kwargs : dict
        Extra keyword arguments, including:

        * ``modeldir``: directory in which the package with model code
        generated by amici will be stored. if
        * ``compile_model``: indicates whether amici code will be regenerated

    """

    _supports = {'multi_initials': True,
                 'multi_param_values': True}

    def __init__(self, model, tspan=None, initials=None, param_values=None,
                 verbose=False, **kwargs):

        if amici is None:
            raise ImportError('AmiciSimulator requires a working installation'
                              'of amici. You can install amici via `pip '
                              'install amici`.')

        super(AmiciSimulator, self).__init__(model,
                                             tspan=tspan,
                                             initials=initials,
                                             param_values=param_values,
                                             verbose=verbose,
                                             **kwargs)

        self.modeldir_is_temp = 'modeldir' not in kwargs
        self.modeldir = kwargs.pop('modeldir',
                                    mkdtemp(prefix=f'pysbamici_{model.name}_'))

        if kwargs:
            raise ValueError('Unknown keyword argument(s): {}'.format(
                ', '.join(kwargs.keys())
            ))

        # Generate the equations for the model

        amici.pysb2amici(model,
                         self.modeldir,
                         verbose=True,
                         observables=list(model.expressions.keys()))

        # Load the generated model package
        sys.path.insert(0, self.modeldir)
        modelModulePYSB = importlib.import_module(self.modeldir)

        self.pysb_model = model
        self.amici_model = modelModulePYSB.getModel()
        self.amici_solver = self.amici_model.getSolver()
        self.amici_model.setTimepoints(tspan)

    def __del__(self):
        # if we generated a temporary directory using mkdtemp, we are
        # responsible of cleaning up the directory afterwards
        if self.modeldir_is_temp:
            shutil.rmtree(self.modeldir)

    def run(self, tspan=None, initials=None, param_values=None,
            num_processors=1):
        """
        Run a simulation and returns the result (trajectories)

        .. note::
            In early versions of the Simulator class, ``tspan``, ``initials``
            and ``param_values`` supplied to this method persisted to future
            :func:`run` calls. This is no longer the case.

        Parameters
        ----------
        tspan
        initials
        param_values
            See parameter definitions in :class:`ScipyOdeSimulator`.
        num_processors : int
            Number of processes to use (default: 1). Set to a larger number
            (e.g. the number of CPU cores available) for parallel execution of
            simulations. This is only useful when simulating with more than one
            set of initial conditions and/or parameters.

        Returns
        -------
        A :class:`SimulationResult` object
        """
        super(AmiciSimulator, self).run(tspan=tspan,
                                        initials=initials,
                                        param_values=param_values,
                                        _run_kwargs=[])
        n_sims = len(self.param_values)

        if num_processors == 1:
            self._logger.debug('Single processor (serial) mode')
        else:
            self._logger.debug('Multi-processor (parallel) mode using {} '
                               'processes'.format(num_processors))

        edatas = self.simulationspecs_to_edatas(
            self._run_tspan,
            self._run_initials,
            self._run_params,
        )

        rdatas = amici.runAmiciSimulations(
            model=self.amici_model, solver=self.amici_solver, edatas=edatas,
            failfast=False, num_threads=num_processors
        )

        self._logger.info('All simulation(s) complete')
        return SimulationResult(self, np.array([self.tspan] * n_sims),
                                self.rdatas_to_trajectories(rdatas))

    def simulationspecs_to_edatas(self, tspan, initials, param_values):
        return []


    def rdatas_to_trajectories(self, rdatas):
        return []


